<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>oliver</author>
  <title>Writing Acceptance Tests for an Orchard / ASP.NET MVC Application – using SpecFlow, Coypu (Selenium) and the MvcIntegrationTestFramework</title>
  <description />
  <content>&lt;p&gt;When we started development on &lt;a title="Marinaführer - Marinas guide" href="http://www.marinas.info" target="_blank"&gt;Marinas.info&lt;/a&gt;, we decided to write acceptance tests for all important features of our application. This decision was even more justified by the fact that a bunch of similar platforms are to follow using the same codebase. We wanted an application with less bugs and easier maintenance.&lt;/p&gt;  &lt;p&gt;Writing good, automated acceptance tests is not easy and it’s not fast, either. For some time now, we’ve been trying to get the first set of our tests run green, which proved especially tricky on our &lt;a href="http://www.jetbrains.com/teamcity/" target="_blank"&gt;TeamCity&lt;/a&gt; continuous integration server. This post investigates a working solution.&lt;/p&gt;  &lt;h2&gt;The ingredients: SpecFlow, Coypu (Selenium), Browser, Web Server, and MvcIntegrationTestFramework&lt;/h2&gt;  &lt;h3&gt;SpecFlow&lt;/h3&gt;  &lt;p&gt;In .NET world, using &lt;a href="http://www.specflow.org" target="_blank"&gt;SpecFlow&lt;/a&gt; to write acceptance tests is nothing new and has recently become, yet again, more appealing after its update to version 1.9. One of our scenarios for verifying image upload functionality looks like this:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://shades-of-orange.com/image.axd?picture=image_49.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://shades-of-orange.com/image.axd?picture=image_thumb_49.png" width="345" height="107" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;It’s simple to write, easy to read and great living documentation.&lt;/p&gt;  &lt;h3&gt;&lt;font style="font-weight: bold"&gt;For Browser based tests you need:&lt;/font&gt;&lt;/h3&gt;  &lt;h3&gt;Coypu (Selenium)&lt;/h3&gt;  &lt;p&gt;Everyone who has written tests for Selenium for even a mildly ajax-y site knows how painful it can be to create reliably working tests. &lt;a href="https://github.com/featurist/coypu" target="_blank"&gt;Coypu&lt;/a&gt; alleviates the pain and makes test creation as straight-forward as it should be in the first place. &lt;a href="https://github.com/featurist/coypu#coypu-is" target="_blank"&gt;Coypu is&lt;/a&gt;:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;A robust wrapper for browser automation tools on .Net, such as Selenium WebDriver that eases automating ajax-heavy websites and reduces coupling to the HTML, CSS &amp;amp; JS &lt;/li&gt;    &lt;li&gt;A more intuitive DSL for interacting with the browser in the way a human being would &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;A few examples of Coypu’s clean API can be seen here in one of the step definitions for the above scenario (&lt;font face="Courier New"&gt;Browser&lt;/font&gt; is an instance of the &lt;font face="Courier New"&gt;BrowserSession&lt;/font&gt; class from Coypu):&lt;/p&gt;  &lt;p&gt;&lt;a href="http://shades-of-orange.com/image.axd?picture=image_50.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://shades-of-orange.com/image.axd?picture=image_thumb_50.png" width="737" height="221" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;h3&gt;A web browser&lt;/h3&gt;  &lt;p&gt;To run browser based tests you, of course, need … a browser! Coypu offers support for quite a bunch of them, including the usual suspects Internet Explorer, Chrome, and Firefox.&lt;/p&gt;  &lt;h3&gt;A web server&lt;/h3&gt;  &lt;p&gt;You need to host your application in some web server or another to process requests. Well, this statement turns out to be only partially true, as you will see with the MvcIntegrationTestFramework. But at least for browser based test you need a web server, and you basically have the choice between IIS and IIS Express (if you don’t want to write your own or use someone else’s implementation). We chose IIS Express as it is manageable through a non-administrator account, but it needs to be installed on all machines that will execute the tests.&lt;/p&gt;  &lt;h3&gt;&lt;font style="font-weight: bold"&gt;For non-browser based tests:&lt;/font&gt;&lt;/h3&gt;  &lt;h3&gt;MvcIntegrationTestFramework&lt;/h3&gt;  &lt;p&gt;&lt;a title="MvcIntegrationTestFramework" href="http://blog.stevensanderson.com/2009/06/11/integration-testing-your-aspnet-mvc-application/" target="_blank"&gt;Introduced by Steven Sanderson in 2009&lt;/a&gt;, this small framework allows to write integration tests for ASP.NET MVC applications and execute them &lt;strong&gt;without a browser&lt;/strong&gt;! It empowers you to make assertions on your controllers’ actions’ results rather than on the rendered html output by injecting some clever hooks into your MVC application under test. An example of how a test would look can be found in the &lt;a href="http://blog.stevensanderson.com/2009/06/11/integration-testing-your-aspnet-mvc-application/" target="_blank"&gt;above mentioned post&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;The “magic” of this framework lies in the use of &lt;font face="Courier New"&gt;ApplicationHost.CreateApplicationHost()&lt;/font&gt; which creates an application domain for hosting your ASP.NET application. Check out this screenshot of part of the source code:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://shades-of-orange.com/image.axd?picture=image_51.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://shades-of-orange.com/image.axd?picture=image_thumb_51.png" width="913" height="295" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;h2&gt;How to put the pieces together&lt;/h2&gt;  &lt;p&gt;After a quite radical evolution of our test code (which you can read up on in my follow-up post &lt;a href="http://shades-of-orange.com/post/2012/08/22/The-Long-Road-to-Browser-Based-Acceptance-Testing.aspx"&gt;The Long Road to Browser Based Acceptance Testing&lt;/a&gt;), we finally settled for the following:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Before the first test starts, setup an instance of the AUT (application under test). This includes:&lt;/li&gt;    &lt;ul&gt;     &lt;li&gt;deploying the AUT as we do for our staging environment, but to a temp folder&lt;/li&gt;      &lt;li&gt;initialize an AppHost instance à la MvcIntegrationTestFramework, i.e. an ASP.NET enabled application domain that hosts the AUT&lt;/li&gt;      &lt;li&gt;execute the &lt;a title="The Orchard Project" href="http://www.orchardproject.net/" target="_blank"&gt;Orchard&lt;/a&gt; setup command via the AppHost instance (instead of running the setup through a browser, which we used to do but was a lot slower)&lt;/li&gt;   &lt;/ul&gt;    &lt;li&gt;Before each test run (SpecFlow scenario) we then execute various commands to setup the environment for the concrete test, e.g.:&lt;/li&gt;    &lt;ul&gt;     &lt;li&gt;clean the database simply by overwriting it with a copy we saved after the initial setup&lt;/li&gt;      &lt;li&gt;create Marina entries that will be displayed and searchable on the site, again, using the AppHost instance&lt;/li&gt;   &lt;/ul&gt;    &lt;li&gt;Once we want to execute steps in the browser, we do the following:&lt;/li&gt;    &lt;ul&gt;     &lt;li&gt;start an instance of &lt;a href="http://www.microsoft.com/en-us/download/details.aspx?id=1038" target="_blank"&gt;IIS Express&lt;/a&gt; pointing to the deployed application (we used the wrapper code from &lt;a href="http://www.neovolve.com/post/2012/03/18/Spinning-up-IISExpress-for-integration-testing.aspx"&gt;Spinning up IISExpress for integration testing&lt;/a&gt;)&lt;/li&gt;      &lt;li&gt;initiate a Coypu BrowserSession which under the hood creates an instance of the browser you choose&lt;/li&gt;      &lt;li&gt;after battling with Internet Explorer, Chrome, and Firefox Portable, we now use &lt;a href="http://www.mozilla.org/en-US/firefox/organizations/all.html" target="_blank"&gt;Firefox 10.0.6 ESR&lt;/a&gt; (Extended Support Release) because version 10 is of now the highest version supported by Selenium (2.1.25) and the ESR doesn’t ask to be updated all the time&lt;/li&gt;   &lt;/ul&gt;    &lt;li&gt;After each test run (SpecFlow scenario) we do this:&lt;/li&gt;    &lt;ul&gt;     &lt;li&gt;close the browser&lt;/li&gt;      &lt;li&gt;shut down the IIS Express instance (we slightly modified the above mentioned wrapper code calling &lt;font face="Courier New"&gt;Kill()&lt;/font&gt; on the process instance after the call to &lt;font face="Courier New"&gt;CloseMainWindow()&lt;/font&gt; so that it reliably terminates even on TeamCity)&lt;/li&gt;   &lt;/ul&gt; &lt;/ol&gt;  &lt;h2&gt;Conclusion&lt;/h2&gt;  &lt;p&gt;Setting up a reliable environment for automatically executing acceptance tests has not been a walk through the park but we finally have a solution that basically “just works”. Hopefully, our experience will help you save a couple of hours and also some headache along the way &lt;img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-winkingsmile" alt="Winking smile" src="http://shades-of-orange.com/image.axd?picture=wlEmoticon-winkingsmile_2.png" /&gt;&lt;/p&gt;  &lt;p&gt;Happy coding!&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2012-08-22 13:48:22</pubDate>
  <lastModified>2012-08-22 22:16:49</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>Writing-Acceptance-Tests-for-an-Orchard-ASPNET-MVC-Application-using-SpecFlow-Coypu-(Selenium)-and-the-MvcIntegrationTestFramework</slug>
  <tags>
    <tag>coypu</tag>
    <tag>orchard</tag>
  </tags>
  <comments />
  <categories>
    <category>6cb56168-2015-4599-a1c1-8db9c9fae433</category>
    <category>bc3db496-f484-41a0-860c-c2e57e829fa0</category>
    <category>5fef49e2-2727-46c7-94a7-9816011a72c2</category>
    <category>7d017c9a-cbb6-4c57-82d0-083052427cda</category>
    <category>94b034d9-a1c3-4b5f-9b37-d39930d673ba</category>
    <category>678a9d57-c1ea-487a-8fd3-4d08dc0be9c4</category>
    <category>da405bb3-bccc-4d29-bd8c-cbbcb36a4bc7</category>
    <category>3b5447eb-ff3b-4481-9287-0508fce6262b</category>
  </categories>
  <notifications />
</post>