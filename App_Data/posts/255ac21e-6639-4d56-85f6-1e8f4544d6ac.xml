<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>Anton</author>
  <title>.NET Open Space 2010 (Leipzig) Review</title>
  <description />
  <content>&lt;p&gt;Vom 16. bis 17.10. fand das diesjährige &lt;a href="http://netopenspace.de/2010/" target="_blank"&gt;Leipziger .NET Open Space&lt;/a&gt; statt. Insgesamt fand ich es auch diese Jahr wieder gut. Ich besuchte es in meiner Freizeit, aber mein Arbeitgeber zahlte die Reisekosten. Für .NET Softwareentwickler, wie ich einer bin, ist das .NET Open Space eine interessante (Un-)Konferenz, bei der man viele neue Ideen und Eindrücke bekommt, und sich mit anderen aus der Branche austauschen kann. Ich will hier von meinen Eindrücken berichten, wobei sie aus der Sicht unserer Firma (&lt;a href="http://www.teamaton.com" target="_blank"&gt;teamaton&lt;/a&gt;) sind.&lt;/p&gt;  &lt;p&gt;Gegliedert war das Open Space in Sessions – fünf an jedem Tag. Die Teilnehmer schlugen selbst die Themen vor Ort vor. Leider verliefen sich die Massen am Sonntag Nachmittag recht früh, so dass die letzten Sessions zum Teil ausfielen. Hier das, was ich aus den Sessions mitgenommen habe:&lt;/p&gt;  &lt;h3&gt;Agile Development&lt;/h3&gt;  &lt;p&gt;Es wurde viel darüber diskutiert, was denn eigentlich agil bedeutet. Dabei wurde auf das &lt;a href="http://de.wikipedia.org/wiki/Agile_Softwareentwicklung" target="_blank"&gt;Agile Manifest&lt;/a&gt; eingegangen. Viele berichteten, wie es bei ihnen in der Firma eingeführt wurde, und worauf man dabei achten sollte. Es wurde deutlich, dass in vielen Abteilungen zwar von Agilität gesprochen wurde, aber die Leute noch weit von agiler Entwicklung entfernt sind. Betont wurde, dass Agile Softwareentwicklung vor allem eine Einstellungssache ist, und Transparenz sehr wichtig ist.&lt;/p&gt;  &lt;p&gt;Ich selbst will mir SCRUM, XP (Extreme Programming) und Crystal Clear genauer anschauen. Das sind Prozesse und Richtlinien, die Agiles Entwickeln unterstützen. Mal schauen, was wir an unseren bisherigen, größtenteils agilen Prozessen verbessern sollten.&lt;/p&gt;  &lt;h3&gt;GIT Workflow&lt;/h3&gt;  &lt;p&gt;In dieser Session ging es darum, wie man Branches und Merges in GIT sinnvoll einsetzt. Es wurde ein &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank"&gt;Model&lt;/a&gt; vorgestellt. Um dieses Model effizient umzusetzen gibt es eine Software, &lt;a href="http://github.com/nvie/gitflow" target="_blank"&gt;git flow&lt;/a&gt;. Das Model hat mich überzeugt. Ich denke, ich werde git flow mal ausprobieren, und auch das Branching wie in dem Model gestalten. Das hat viele Vorteile für Entwickler, Tester und Deployer.&lt;/p&gt;  &lt;h3&gt;Testen&lt;/h3&gt;  &lt;p&gt;Hier wurde sehr viel darüber gesprochen, was eigentlich getestet werden sollte. Wann testet man zuviel, wann zu wenig?&lt;/p&gt;  &lt;p&gt;Mir haben sich aus dieser Session heraus einige Fragen ergeben: Brauchen wir ein BDD-Framework? (Viele meinten BDD-Frameworks seien zu kompliziert. Ich denke, wir brauchen vorerst keins.) Sollte man nur Verhalten testen? Testen wir zuviel? Was sollten wir testen? Brauchen wir Mocking? Zudem will ich mir &lt;a href="http://vimeo.com/3443349" target="_blank"&gt;Gabriel Schenkers Screencast&lt;/a&gt; anschauen.&lt;/p&gt;  &lt;h3&gt;Tools &amp;amp; AddIns&lt;/h3&gt;  &lt;p&gt;Hier wurden viele nützliche Tools vorgestellt – ich habe mir notiert, was ich mir mal anschauen will:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;&lt;a href="http://www.roland-weigelt.de/emaroo/" target="_blank"&gt;emaroo&lt;/a&gt; (most recently used …) &lt;/li&gt;    &lt;li&gt;&lt;a href="http://sqlcop.lessthandot.com/" target="_blank"&gt;SQLCop&lt;/a&gt; (Analyse von SQL-DBs – Fehler, Best Practice) &lt;/li&gt;    &lt;li&gt;&lt;a href="http://karlsruhe.netopenspace.de/2010/Arbeitsbereich%20Soft%20Skills.ashx" target="_blank"&gt;Toolssession des Open Space in Karlruhe&lt;/a&gt; &lt;/li&gt;    &lt;li&gt;Zeichnen, Mockups: Balsamiq, SketchFlow, Pencil (Firefox) &lt;/li&gt;    &lt;li&gt;Screenshots: Snagit, Fasstone Capturer, Screenpresso (nutze ich) &lt;/li&gt;    &lt;li&gt;Videocapturing: Expression Encoder Screencapture 4 &lt;/li&gt;    &lt;li&gt;&lt;a href="http://www.evernote.com/" target="_blank"&gt;evernote&lt;/a&gt; &lt;/li&gt;    &lt;li&gt;statt radmin oder Teamviewer: SharedView, Mikogo &lt;/li&gt;    &lt;li&gt;für Windows XP (habe ich noch zu Hause): &lt;a href="http://www.launchy.net/about.php" target="_blank"&gt;launchy&lt;/a&gt;, &lt;a href="http://www.realtimesoft.com/de/ultramon/Default.asp" target="_blank"&gt;ultramon&lt;/a&gt; &lt;/li&gt;    &lt;li&gt;ich sollte endlich man das normale Notepad durch Notepad++ ersetzen &lt;/li&gt;    &lt;li&gt;für Filestorage könnten wir auch Windows Live Skydrive nutzen (25GB, aber kopieren ist nicht so einfach wie bei dropbox) &lt;/li&gt;    &lt;li&gt;&lt;a href="http://xsd2code.codeplex.com/" target="_blank"&gt;xsd2code&lt;/a&gt; (.NET Klassen aus xml generieren) &lt;/li&gt;    &lt;li&gt;&lt;a href="http://paint.net/" target="_blank"&gt;Paint.NET&lt;/a&gt; (Bildbearbeitung) &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Visual Studio besser nutzen lernen:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Snippets &lt;/li&gt;    &lt;li&gt;Extensions (siehe Extensions Manager oder VS Gallery (online)):      &lt;ul&gt;       &lt;li&gt;CodeRush (guter Code) &lt;/li&gt;        &lt;li&gt;EditorGuidelines (guter Code) &lt;/li&gt;        &lt;li&gt;NuPack (Referenzen als Pakete hinzufügen, damit es keine Versionsprobleme bei Referenzen gibt) &lt;/li&gt;        &lt;li&gt;Productivity Power Tools (z.B. Solution Navigator) &lt;/li&gt;        &lt;li&gt;SnippetDesigner (es. ex. wohl auch jQuery-Snippets) &lt;/li&gt;        &lt;li&gt;Typemock TestLint &lt;/li&gt;        &lt;li&gt;ZippyChirpy (css-Dateien minimieren) &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;.NET Reflector &lt;/li&gt; &lt;/ul&gt;  &lt;h3&gt;DRY ums Verrecken?&lt;/h3&gt;  &lt;p&gt;In dieser Session wurde viel über Codeduplikation diskutiert. Sollte man knallhart an dem Prinzip festhalten und nie Code duplizieren? Oder ist es in bestimmten Bereichen ok, ähnlichen Code mehr als ein Mal zu haben?&lt;/p&gt;  &lt;p&gt;Konsens war, dass man bei Tests nicht auf DRY achten sollte, sondern lieber die Tests einfach lassen. Bei Algorithmen sollte man auf DRY achten. Insgesamt sollte man abwägen, wie oft der Code wahrscheinlich noch angefasst wird (viele waren sich einig, dass bestehender Code bei neuen Anforderungen nach einem Jahr sowieso neu geschrieben wird). Und wie aufwendig die Anwendung von DRY wäre. Dann sollte man entscheiden, ob man den Code abstrahieren sollte, um ihn an verschiedenen Stellen einzusetzen.&lt;/p&gt;  &lt;h3&gt;DDD (Domain Driven Design)&lt;/h3&gt;  &lt;p&gt;Hier wurde um die Schwierigkeiten geredet, verschiedene Sichten (z.B. User und Admin) in ein einziges Modell zu vereinen. Man will sie vereinen, da sie auf die selben Daten zugreifen. Es wurde auch über die verschiedenen Aspekte von DDD geredet.&lt;/p&gt;  &lt;p&gt;Man sollte das Domänenmodell unabhängig von der Persistenz aufbauen. Viel zu oft lassen wir Entwickler uns verleiten, schon gleich zu weit (in die Persistenz) zu denken, wenn gerade erst die Architektur aufbauen. Der Gegensatz zu DDD wären Architekturen, die nur aus Datenobjekten (mit gettern und settern) bestehen. Bei DDD sollte man versuchen das Hauptaugenmerk auf das Verhalten der Applikation und der Prozesse zu legen, also die reale Welt abbilden. Hier muss man auf das Verhalten der Kunden eingehen. Dies setzt eine gemeinsame Sprache (ubiquitous language) voraus.&lt;/p&gt;  &lt;p&gt;Es wurde stark auf &lt;strong&gt;Aggregates&lt;/strong&gt; (Aggregate-Root) eingegangen. Z.B. wäre Order ein Aggregate von OrderItems. In solchen Fällen sollte das Aggregate die volle Kontrolle über seine aggregierten Objekte behalten. Order sollte also der einzige Einstiegspunkt sein (über Methoden), um etwas an den OrderItems zu ändern. (OrderItems sollte auch besser ein IEnumerable statt einer IList sein.) In der Objektarchitektur sollten beidseitige Referenzen vermieden werden. Dies ist aber schwierig, wenn zwei Sichten aufeinandertreffen.&lt;/p&gt;  &lt;p&gt;Dann wurde noch über &lt;strong&gt;Context Mapping&lt;/strong&gt; oder Bounded Context gesprochen. Hier geht es um zwei Modelle auch zwei verschiedenen Welten, die aber auf die selben Daten zugreifen. Man kann sich zu einem gewissen Grad mit dem Repositorypattern behelfen. Man hätte also eine Art Core-Domäne und damit verbunden die zwei Kontexte A und B, die von einander unabhängig sind. Grundsätzlich sollte man anhand der Aufgabe zunächst die Sicht modellieren, die vorrangig ist, und danach das zweite Modell integrieren, so dass die zweite Sicht auf die erste zugreift.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://shades-of-orange.com/image.axd?picture=DDD%20beim%20NET%20Open%20Space.jpg"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="DDD beim NET Open Space" border="0" alt="DDD beim NET Open Space" src="http://shades-of-orange.com/image.axd?picture=DDD%20beim%20NET%20Open%20Space_thumb.jpg" width="538" height="360" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Ich bin auf jeden Fall nächstes Jahr wieder dabei.&lt;/p&gt;  &lt;p&gt;Anton.&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2010-10-25 17:59:00</pubDate>
  <lastModified>2010-10-25 18:14:56</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>NET-Open-Space-2010-(Leipzig)-Review</slug>
  <tags />
  <comments />
  <categories />
  <notifications />
</post>