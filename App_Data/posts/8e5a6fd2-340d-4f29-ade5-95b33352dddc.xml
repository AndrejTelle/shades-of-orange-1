<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>admin</author>
  <title>Model Driven Architecture (MDA) - contra</title>
  <description />
  <content>&lt;p&gt;&lt;a href="http://speak-friend.com/images/speak-friend_com/andrej/WindowsLiveWriter/ModelDrivenArchitectureMDAcontra_7717/282707058_02305d3cce.jpg" atomicselection="true"&gt;&lt;img style="border-right: 0px; border-top: 0px; margin: 0px 5px 5px 0px; border-left: 0px; border-bottom: 0px" height="140" alt="282707058_02305d3cce" src="http://speak-friend.com/images/speak-friend_com/andrej/WindowsLiveWriter/ModelDrivenArchitectureMDAcontra_7717/282707058_02305d3cce_thumb.jpg" width="159" align="left" border="0" /&gt;&lt;/a&gt;Sicherlich ist "&lt;a href="http://de.wikipedia.org/wiki/Model_Driven_Architecture"&gt;Model Driven Architecture&lt;/a&gt;" einer der verheißungsvollsten Trends der letzten Jahre. Keinen schmerzhaften &lt;a href="http://de.wikipedia.org/wiki/CRUD"&gt;CRUD&lt;/a&gt; Code schreiben, die Abstraktionsebene auf das eigentliche Problem heben und gelegentlich den „Erstellen“ Button drücken um einen Prototypen zu erzeugen. Das Frontend benötigt dann, zur Projektabgabe nur noch den letzten Feinschliff. So schön die Theorie.&lt;/p&gt; &lt;p&gt;Ich muss natürlich gestehen, das alle meine versuche zum Thema bisher rudimentär waren. Ich habe und das ist wirklich schon ein wenig länger her, mit &lt;a href="http://www-306.ibm.com/software/awdtools/developer/rose/visualstudio/"&gt;Rational XDE&lt;/a&gt;  und &lt;a href="http://www.sparxsystems.com.au/"&gt;„Enterprise Architect“&lt;/a&gt;  Klassen generiert. XDE konnte damals (2003) schon „roundtrip engineering“ und hat das Klassen Model in beide Richtungen aktualisiert, also vom Designer Richtung Code und zurück. Gierig habe ich mir auch Microsofts „&lt;a href="http://msdn2.microsoft.com/en-us/vstudio/aa718368.aspx"&gt;Domain Specific Language Tools&lt;/a&gt;“ angeschaut (die nicht wie der Name vermuten läst &lt;a href="http://martinfowler.com/articles/languageWorkbench.html"&gt;DSLs&lt;/a&gt; im klassischen Sinne bearbeiten u. erstellen lässt sondern eher in die MDA Tool Kategorie gehört). Alles natürlich keine reinen &lt;a href="reinen MDA Tools"&gt;MDA Tools&lt;/a&gt; aber sie decken eine Schnittmenge ab, von dem was ich von einem derartigen Tool erwarten würde. &lt;/p&gt; &lt;p&gt;Leider waren alle diese Versuche nur einziges Zeitgrab. Eine Klassendiagram ist nur ein Ausschnitt eines Problems und repräsentiert die Implementierung nur eben ungefähr. Alles andere führt zu einer Informationsexplosion, die das eigentliche Ziel von Uml-Diagrammen, Modellierung und Kommunikation, obsolet werden lässt. Meine zweite Erfahrung war, dass das eigentlich Implementieren in händischer Manier, inkrementell, von Problemfeld zu Problemfeld von Klasse für Klasse zu sauberem Code führte. Das Ergebnis lebt davon, dass Zeit in das Modellieren von Ausschnitten investiert wurde, was zu vielen kleinen, auf die Anforderung angepassten Detail-Lösungen führt. In allen Schichten der Anwendung. Drittens: Für mich die schnellste Form eine Anforderung zu verstehen, ist eine Skizze auf Papier und eine schnelle Implementierung, die auch gern ein Mock-up sein kann. Das führt zu vielen kleinen Iterationen, die Stück zu Stück zu einem runden Ganzen führen.  &lt;/p&gt;&lt;p&gt;Es gibt die schöne Analogie, die so entstandene, organisch gewachsene Software mit Orten zu vergleichen, die sich um eine Kirche herum scharen, mit vielen kleinen Geschäften. Hingegen MDA generierter Code so ist, wie eine am Reisbrett entworfene Vorstadt, mit eine großen Supermarkt, nebst großem Parkplatz in der Nähe. Ich weiß für meinen Teil wo ich lieber arbeiten und wohnen möchten ;-) &lt;/p&gt;&lt;p&gt;Ein oft gehörtes pro MDA Argument ist, das man teuren Architekten das Designen überlassen kann, während billige Standard Coder für das Grobe zuständig sind. Für mich hat dieser Grundansatz schon eine Reihe von Fehlern. Architekten die nicht Coden verlieren an Fähigkeit. Sie programmieren nicht aktiv. Sie können kein Beispiel geben für guten Code. Und viele B-Klasse Coder, das klingt auch nicht wie ein erfolgreiches Dream-Team?  &lt;/p&gt;&lt;p&gt;Zu all dem muß hinzugefügt werden, das ich ein großer Freund von Code-Generierung bin :-) Was aber erstmal nichts mit MDA gemein hat. &lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2007-09-03 07:34:38</pubDate>
  <lastModified>0001-01-01 06:00:00</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>Model-Driven-Architecture-(MDA)-contra</slug>
  <tags />
  <comments />
  <categories>
    <category>678a9d57-c1ea-487a-8fd3-4d08dc0be9c4</category>
  </categories>
  <notifications />
</post>