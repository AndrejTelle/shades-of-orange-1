<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>oliver</author>
  <title>Testing: trying to get it right</title>
  <description />
  <content>&lt;p&gt;Read a great post on &lt;a href="http://blog.stevensanderson.com/" target="_blank"&gt;Steve Sanderson’s blog&lt;/a&gt; with the promising title &lt;a href="http://blog.stevensanderson.com/2009/08/24/writing-great-unit-tests-best-and-worst-practises/" target="_blank"&gt;Writing Great Unit Tests&lt;/a&gt; – and it is definitely worth reading. He mentions another post with the title &lt;a href="http://blog.stevensanderson.com/2009/06/11/integration-testing-your-aspnet-mvc-application/"&gt;Integration Testing Your ASP.NET MVC Application&lt;/a&gt; which I also recommend. One of the eye openersfor me was this quote in his post:&lt;/p&gt;  &lt;p&gt;“&lt;em&gt;TDD is a design process, not a testing process&lt;/em&gt;”. Let me elaborate: “&lt;em&gt;TDD is a robust way of designing software components (“units”) interactively so that their behaviour is specified through unit tests.”&lt;/em&gt;&lt;/p&gt;  &lt;p&gt;I must admit that I haven’t read much yet about TDD – but we’ve been writing tests for quite some time now. Unfortunately, most of them probably fall into the &lt;em&gt;Dirty Hybrids&lt;/em&gt; category that Sanderson sees between two good ends, one being &lt;em&gt;True Unit Tests&lt;/em&gt;, the other being &lt;em&gt;Integration Tests.&lt;/em&gt; I allow myself to add his illustration here:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://shades-of-orange.com/image.axd?picture=image-thumb1%5B1%5D.png"&gt;&lt;img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image-thumb1[1]" border="0" alt="image-thumb1[1]" src="http://shades-of-orange.com/image.axd?picture=image-thumb1%5B1%5D_thumb.png" width="695" height="185" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;So it looks like our goal should be to write tests in either of the outer categories and slowly but surely get rid of the time consuming, easy-to-break hybrid tests.&lt;/p&gt;  &lt;p&gt;One problem that a lot of people writing web applications are confronted with at some point, is testing the whole application stack from browser action over server reaction to browser result. We’ve put some effort into abstracting away the &lt;font face="Courier New"&gt;HttpContext&lt;/font&gt; class to use the abstraction in both our frontend and in tests, but it falls short of being a worthy replacement for the real &lt;font face="Courier New"&gt;HttpRequest&lt;/font&gt; and &lt;font face="Courier New"&gt;HttpResponse&lt;/font&gt; classes. With all that works we’re missing a possibility to use our abstraction in a third party URL Rewriting engine, so the requests we are testing never get processed by it. We have tests for the rules that are applied by the engine, but for more sophisticated setups this simply is not enough. Thanks to a link on Steve Sanderson’s blog post on integration testing ASP.NET MVC applications I stumbled upon &lt;a href="http://haacked.com/archive/2007/06/19/unit-tests-web-code-without-a-web-server-using-httpsimulator.aspx"&gt;Phil Haack’s HttpSimulator&lt;/a&gt; – and it looks just like the piece in the puzzle we’ve been missing for all that time. (I have no idea how we didn’t find that earlier.)&lt;/p&gt;  &lt;p&gt;Another thing I’m new to is &lt;em&gt;kata&lt;/em&gt;. &lt;a href="http://en.wikipedia.org/wiki/Kata"&gt;Kata&lt;/a&gt; is a Japanese word describing detailed choreographed patterns of movements practiced either solo or in pairs. A &lt;a href="http://en.wikipedia.org/wiki/Kata_(programming)"&gt;code kata&lt;/a&gt; is an exercise in programming which helps hone your skills through practice and repetition. At first, it might sound weird to practice and &lt;em&gt;repeat&lt;/em&gt; the same exercise over and over again. But then again, if we think of musicians or sportsmen it’s not hard to see that they become great at what they do only by practicing. A lot. And they practice the same move (let’s just call it that) over and over again. The idea behind the code kata is that programmers should do the same. This is what Dave Thomas, one of the authors of &lt;a href="http://www.pragprog.com/the-pragmatic-programmer"&gt;The Pragmatic Programmer&lt;/a&gt;, also promotes on &lt;a href="http://codekata.pragprog.com/codekata/"&gt;his blog&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;I stumbled upon a very interesting kata in a blog post by Robert Martin about test driven development, which deals with the evolution of tests and poses the assumption that there might be a kind of priority for test code transformation that will lead to good code: &lt;a href="http://cleancoder.posterous.com/the-transformation-priority-premise"&gt;The Transformation Priority Premise&lt;/a&gt;. The kata he mentions further down is the &lt;a href="http://thecleancoder.blogspot.com/2010/10/craftsman-62-dark-path.html"&gt;word wrap kata&lt;/a&gt;. The post is rather long so count at least 15 min to read it. For me it was well worth it. The solution to a very simple problem, at least a problem that’s easy to explain, can be quite challenging – and the post shows hands on how writing good tests can help you find a good solution faster. It showed me (again) that writing &lt;em&gt;good&lt;/em&gt; tests lets you write good code. Just like the quote above states: TDD is a software development process.&lt;/p&gt;  &lt;p&gt;Happy coding – through testing ;-)&lt;/p&gt;  &lt;p&gt;Oliver&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2011-02-09 10:54:51</pubDate>
  <lastModified>2011-02-09 10:56:11</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>Testing-trying-to-get-it-right</slug>
  <tags />
  <comments />
  <categories>
    <category>cb82911b-137b-402e-be57-2fe9fe9fae2e</category>
    <category>da405bb3-bccc-4d29-bd8c-cbbcb36a4bc7</category>
    <category>678a9d57-c1ea-487a-8fd3-4d08dc0be9c4</category>
  </categories>
  <notifications />
</post>