<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>Anton</author>
  <title>Developer Open Space 2012 (Leipzig) Review</title>
  <description />
  <content>&lt;p&gt;Vom 19. bis 21.10. fand das diesjährige &lt;a href="http://netopenspace.de/2012/" target="_blank"&gt;Leipziger Developer Open Space&lt;/a&gt; statt. Für Softwareentwickler, wie ich einer bin, ist das .NET Open Space eine interessante (Un-)Konferenz, bei der man viele neue Ideen und Eindrücke bekommt, und mit anderen aus der Branche Erfahrungen austauschen kann. Dieses Jahr gab es zum ersten Mal einen Workshoptag. Dadurch war das Open Space drei Tage lang, statt der bisher üblichen zwei. Hier das, was ich aus den Sessions mitgenommen habe:&lt;/p&gt;  &lt;h2&gt;Windows Azure Workshop&lt;/h2&gt;  &lt;p&gt;&lt;a href="http://www.sascha-dittmann.de/" target="_blank"&gt;Sascha Dittmann&lt;/a&gt; hat uns gut in die Möglichkeiten eingeführt, welche Azure bereitstellt. Interessant war für mich insbesondere die gute Integration mit Visual Studio (direktes Deployment möglich) und github (Pushdeployment möglich). Ich hatte mir extra einen Testaccount bei Azure angelegt, damit ich während des Workshops die Features gleich testen konnte. Hier sind noch ein paar Slides, die Sascha verwendet hat: &lt;a href="http://de.slideshare.net/Sascha5812/windows-azure-fr-entwickler-10468068" target="_blank"&gt;Einführung&lt;/a&gt;, &lt;a href="http://de.slideshare.net/Sascha5812/cloudops-summit-2012-3-wege-in-die-cloud" target="_blank"&gt;Wege in die Cloud&lt;/a&gt;.&lt;/p&gt;  &lt;h2&gt;Persönlichkeitstypologie&lt;/h2&gt;  &lt;p&gt;Olga, die eigentlich auch Entwicklerin ist, sich aber sehr für Psychologie interessiert, bot eine zweistündige Einführung in die Persönlichkeitstypologie nach &lt;a href="http://en.wikipedia.org/wiki/Myers-Briggs_Type_Indicator" target="_blank"&gt;Myers und Briggs&lt;/a&gt;. Es war interessant darüber nachzudenken, welche Art von Person man ist, und wie man sich gegenüber anderen Typen verhält. In den USA ist diese Typisierung wohl weit verbreitet, und dient den Firmen dazu, Konfliktpotential zu reduzieren. Durch das Wissen um den Typen, der einem gegenübersteht, kann man entsprechend auf die Person eingehen. Klar geht das auch, wenn man Menschen besonders gut einschätzen kann. Ich bin vom Typ &lt;a href="http://en.wikipedia.org/wiki/ISTJ" target="_blank"&gt;ISTJ&lt;/a&gt;.&lt;/p&gt;  &lt;h2&gt;Domain Driven Design + CQRS + Eventsourcing&lt;/h2&gt;  &lt;p&gt;Das war für mich eine gute Auffrischung der Konzepte und Möglichkeiten, die es bei Alternativen zu CRUD-Anwendungen gibt. Hier ging es speziell um komplexere Anwendungen, bei denen es besonders wichtig die &lt;a href="http://en.wikipedia.org/wiki/Domain-driven_design" target="_blank"&gt;Domäne&lt;/a&gt; gut zu erarbeiten, und die dort vorhandenen Aktionen am besten als Events zu verarbeiten. Dann ist natürlich auch &lt;a href="http://en.wikipedia.org/wiki/CQRS" target="_blank"&gt;CQRS&lt;/a&gt; sinnvoll, bei dem man einen Eventstore vorhält, aus dem dann die verschiedenen Sichten extrahiert werden können.&lt;/p&gt;  &lt;h2&gt;UI-Tests&lt;/h2&gt;  &lt;p&gt;Erst redeten wir allgemein über Testing, und wie die Erfahrungen der einzelnen Leute ist. Wir sprachen über UnitTests, Integrationstests, Behaviortests. Ich hatte in diesem Zusammenhang eine Session zu &lt;a href="http://specflow.org/specflow/getting-started.aspx" target="_blank"&gt;SpecFlow&lt;/a&gt; und &lt;a href="https://github.com/featurist/coypu" target="_blank"&gt;Coypu&lt;/a&gt; vorgeschlagen. Folgende Erkenntnisse sammelte ich:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;UI-Tests dauern lange, und sind daher fürs Test Driven Development nicht geeignet. &lt;/li&gt;    &lt;li&gt;Einige lassen diese Tests nur ein Mal am Tag laufen. &lt;/li&gt;    &lt;li&gt;Sie eignen sich sehr gut zu Dokumentation und Besprechung der Features mit dem Kunden. &lt;/li&gt;    &lt;li&gt;Oft müssen die Entwickler, die die Tests schreiben, die Spezifikationen anpassen, damit die Tests einfacher umzusetzen und wiederverwendbar sind. &lt;/li&gt;    &lt;li&gt;Andere haben oft Probleme, dass mit Werkzeugen wie Selenium, die Tests mal durchlaufen und mal nicht, also kaum Verlässlichkeit entsteht. &lt;/li&gt;    &lt;li&gt;Andere Tools, die genutzt werden: &lt;a href="http://white.codeplex.com/" target="_blank"&gt;White&lt;/a&gt;, &lt;a href="http://mstestcontrib.codeplex.com/" target="_blank"&gt;MSTestContrib&lt;/a&gt;, &lt;a href="http://phantomjs.org/" target="_blank"&gt;PhantomJS&lt;/a&gt; mit &lt;a href="http://casperjs.org/" target="_blank"&gt;CasperJS&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;  &lt;h2&gt;Ruby on Rails&lt;/h2&gt;  &lt;p&gt;Auf dem Hof hörte ich mir eine kurze Einführung in die Welt von Ruby an, und was die Unterschiede zu Entwicklung in .NET sind. Sehr interessant.&lt;/p&gt;  &lt;h2&gt;Psychologie in der Entwicklung&lt;/h2&gt;  &lt;p&gt;Wieder Typeneinteilung, wie z.B. &lt;a href="http://stevepye.me/business-consulting/hots-profile-system/" target="_blank"&gt;HOTS&lt;/a&gt;, &lt;a href="http://en.wikipedia.org/wiki/OCEAN_model_of_personality" target="_blank"&gt;OCEAN&lt;/a&gt;, und Farbkodierungen. Es ging darum Personen neutral einzuordnen, um danach effektivere Teams zusammenstellen zu können (mit der richtigen Mischung), und um besser untereinander kommunizieren zu könnnen (Verständnis für die Art und Weise wie andere denken).&lt;/p&gt;  &lt;h2&gt;Legacy Code&lt;/h2&gt;  &lt;p&gt;Zuerst wurde ein einfaches Tool für den Überblick vorgestellt: &lt;a href="http://c2.com/doc/SignatureSurvey/" target="_blank"&gt;Signature Survey&lt;/a&gt;. Mit &lt;a href="http://www.ndepend.com/" target="_blank"&gt;NDepend&lt;/a&gt; kann man natürlich noch viele andere Codestastiken bekommen. Danach ging es mehr darum, wie man es schafft in Brownfield nicht zu viel zu verändern, aber trotzdem seine Erweiterung gut einzubinden. Falls neue Funktionalität erforderlich ist, sollte man den neuen Code klar vom alten trennen (andere Klasse). Für neuen Code Tests schreiben. Im alten Code nur per Einzeiler (Methodenaufruf) den neuen Code aufrufen. Siehe hier auch den &lt;a href="http://empathic.herokuapp.com/cat" target="_blank"&gt;Blogpost&lt;/a&gt; von Johannes, der bei dieser Session und auch sonst sehr mitteilsam war.&lt;/p&gt;  &lt;h2&gt;Webanwendungen ohne Datenbanken&lt;/h2&gt;  &lt;p&gt;Mittels &lt;a href="http://lokad.github.com/lokad-cqrs/" target="_blank"&gt;Lokad.CQRS&lt;/a&gt; (Sample, kein Framework) hat Jörg und sein Team die Webseite gebaut. Sie nutzt Eventsourcing (Events werden gespeichert, keine Objekte) und ein Eventstore. Sämtliche ViewModels sind vorbereitet und deren Daten werden als json-Dateien gespeichert. Dies ist auch in Azure möglich (über Blobstorage) – man braucht keine DB. Falls die views doch größer werden oder man Suchfunktionalitäten anbeiten möchte, so kann man später &lt;a href="http://ravendb.net/" target="_blank"&gt;RavenDB&lt;/a&gt; einsetzen.&lt;/p&gt;  &lt;h2&gt;Webseite mit nanoc&lt;/h2&gt;  &lt;p&gt;Alex hat am Beispiel von &lt;a href="http://grossweber.com/" target="_blank"&gt;grossweber.com&lt;/a&gt; gezeigt wie man mit nanoc Webseiten basierend auf markdown, haml und Layout erstellen kann. Nanoc bildet aus den Vorlagen und einer Konfiguration (Ruby) funktionierendes HTML. Das ist besonders für statische Seiten geeignet, jedoch muss man einige neue Sprachen und Tools erlernen.&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2012-10-24 20:41:14</pubDate>
  <lastModified>2012-10-24 20:44:18</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>Developer-Open-Space-2012-(Leipzig)-Review</slug>
  <tags />
  <comments />
  <categories />
  <notifications />
</post>