<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>robert</author>
  <title>.NET Build Performance optimieren!</title>
  <description />
  <content>&lt;p&gt;In den letzten Wochen hatte ich die die Möglichkeit Strategien für Beschleunigung von Builds mit Visual-Studio 2008 und MsBuild zu untersuchen. Hier meine Ergebnisse. &lt;/p&gt;  &lt;h2&gt;1:) Multiprozessor Build&lt;/h2&gt;  &lt;p&gt;&lt;a href="http://shades-of-orange.com/image.axd?picture=MSBuild-Multithreaded.png"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="MSBuild-Multithreaded" border="0" alt="MSBuild-Multithreaded" src="http://shades-of-orange.com/image.axd?picture=MSBuild-Multithreaded_thumb.png" width="392" height="74" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Visual Studio unterstützt beim Build per Default nur eine Thread. Doch es geht mehr! Das Zauberwort heißt: &amp;quot;msbuild /m&amp;quot;. &lt;/p&gt;  &lt;p&gt;Detailiert wird das Problem und die Lösung von Scott Hanselman beschrieben: &lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;&lt;a href="http://www.hanselman.com/blog/FasterBuildsWithMSBuildUsingParallelBuildsAndMulticoreCPUs.aspx"&gt;Parallel Builds and Multicore CPUs&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href="http://www.hanselman.com/blog/HackParallelMSBuildsFromWithinTheVisualStudioIDE.aspx"&gt;Parallel MSBuilds from within the Visual Studio IDE&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;  &lt;h2&gt;2:) Einzelnes Output Directory und keine &amp;quot;lokalen Kopien&amp;quot;.&lt;/h2&gt;  &lt;p&gt;Per Default werden Build Ergebnisse in /projekt/bin/&amp;lt;Target&amp;gt;/ kopiert. Alle abhängigen Assemblies werden per Default ebenso kopiert, also auch Build-Ergebnisse anderer Projekte. &lt;/p&gt;  &lt;p&gt;Nehmen wir eine Beispiel-Solution mit 50 Projekten. Jedes Projekt hat ungefähr 10.000 Zeilen Code und nehmen wir an die 50 Projekte sind gerechtfertigt. Wenn jedes Projekt mehrfach von anderen Projekten referenziert wird und 10.000 Zeilen ohne .resx Dateien eine DLL Größe von ca.: 250kb ergeben und eine PDB Größe von ca.:500kb, dann ergeben sich, wenn jedes Projekt ungefähr 10x referenziert wird , 10x750kb*50 - also 375 MB zu kopierende Daten. Obwohl eigentlich nur 37MB kopiert werden müssten. Die Lösung für das Problem? Das Build in ein einzelnes Verzeichnis durchführen, ohne die Abhängigen immer wieder zu kopieren. Hierfür muss neben der Pfadangabe für das OutputDirectory folgende Einstellung vorgenommen werden: &lt;/p&gt;  &lt;p&gt;&lt;a href="http://shades-of-orange.com/image.axd?picture=Copy-Local.png"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="Copy-Local" border="0" alt="Copy-Local" src="http://shades-of-orange.com/image.axd?picture=Copy-Local_thumb.png" width="326" height="317" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;h2&gt;3:) Abhängigkeiten minimieren&lt;/h2&gt;  &lt;p&gt;Wenn I/O Zeiten (siehe 2) kein Problem sind und alle verfügbaren Kerne ausgelastet sind (siehe 1), dann ist der größte verbleibende Zeitfaktor das Auflösen von Abhängigkeiten. &lt;/p&gt;  &lt;p&gt;Eine Analyse lässt sich mit dem &lt;a href="http://msbuildprofiler.codeplex.com/"&gt;MSBUILD-Profiler&lt;/a&gt; durchführen.&amp;#160; &lt;/p&gt;  &lt;p&gt;&lt;a href="http://shades-of-orange.com/image.axd?picture=MSBuild-Profiler.png"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="MSBuild-Profiler" border="0" alt="MSBuild-Profiler" src="http://shades-of-orange.com/image.axd?picture=MSBuild-Profiler_thumb.png" width="601" height="224" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Lösung des Problems? Weniger Abhängigkeiten und Projekte zusammenfassen :-) &lt;/p&gt;  &lt;h2&gt;4:) .licx Dateien nicht Teil des Projekts&lt;/h2&gt;  &lt;p&gt;LC.exe ist langsam. Es lässt sich Build Zeit sparen, wenn Lizenz-Informationen nur bei Bedarf in die Assembly &amp;quot;gebaut&amp;quot; werden. .licxs Dateien sollten nicht eingecheckt werden und nicht Teil des Dev-Builds sein. &lt;/p&gt;  &lt;h2&gt;Was noch?&lt;/h2&gt;  &lt;p&gt;Solutions entkoppeln und Modular arbeiten? Klar :-) Ein schnelle Entwicklungsmaschine hilft, eine gute SSD Platte und ein schneller Prozessor helfen. Wenn man damit nicht mehr weiterkommt, dann gilt es die Solution zu zerlegen. Als Richtwert sollte ein Clean-Build von 500.000 Zeilen Code (&lt;a href="http://www.ndepend.com/Metrics.aspx#NbLinesOfCode"&gt;Nettozeilen ohne Kommentare&lt;/a&gt;) unter einer Minute liegen. &lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2009-12-12 00:45:33</pubDate>
  <lastModified>2009-12-12 00:54:42</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>NET-Build-Performance-optimieren!</slug>
  <tags />
  <comments />
  <categories>
    <category>e4b1e92f-27c2-450e-9253-fdb0e36875c3</category>
  </categories>
  <notifications />
</post>